##############################################################################
#                                                                            #
#                                                      13/Jul/2007  11:42:43 #
# IAR Atmel AVR C/C++ Compiler V4.11A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\arch\cur\counter #
#                    .cpp                                                    #
#    Command line =  S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\arch\cur\counter #
#                    .cpp --cpu=m2561 -ms -o S:\Files\ASUTP\U309M\prjs\avr\l #
#                    ibtst\Debug\Obj\ -lC S:\Files\ASUTP\U309M\prjs\avr\libt #
#                    st\Debug\List\ -y --initializers_in_flash -z2 --no_cse  #
#                    --no_inline --no_code_motion --no_cross_call            #
#                    --no_clustering --no_tbaa --debug                       #
#                    -DENABLE_BIT_DEFINITIONS -e -I                          #
#                    S:\Files\ASUTP\U309M\prjs\avr\libtst\..\mxsrclib\arch\c #
#                    ur\ -I S:\Files\ASUTP\U309M\prjs\avr\libtst\..\mxsrclib #
#                    \ -I "D:\Program Files\IAR Systems\Embedded Workbench   #
#                    4.0 Evaluation\avr\INC\" -I "D:\Program Files\IAR       #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\DLIB\" --eeprom_size 4096 --eec++    #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded    #
#                    Workbench 4.0 Evaluation\avr\LIB\DLIB\dlAVR-5s-ec-n.h"  #
#    List file    =  S:\Files\ASUTP\U309M\prjs\avr\libtst\Debug\List\counter #
#                    .lst                                                    #
#    Object file  =  S:\Files\ASUTP\U309M\prjs\avr\libtst\Debug\Obj\counter. #
#                    r90                                                     #
#                                                                            #
#                                                                            #
##############################################################################

S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\arch\cur\counter.cpp
      1          // Модуль счетчика
      2          //
      3          // Используем Timer1 16 bit
      4          // Версия 0.1
      5          #include <counter.h>
      6          #include <iom2561.h>

   \                                 In segment ABSOLUTE, at 0x8c
   \   <unnamed> volatile __io _A_OCR1C
   \                     _A_OCR1C:
   \   00000000                      DS 2

   \                                 In segment ABSOLUTE, at 0x8a
   \   <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS 2

   \                                 In segment ABSOLUTE, at 0x88
   \   <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS 2

   \                                 In segment ABSOLUTE, at 0x84
   \   <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS 2

   \                                 In segment ABSOLUTE, at 0x82
   \   <unnamed> volatile __io _A_TCCR1C
   \                     _A_TCCR1C:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x81
   \   <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x80
   \   <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS 1

   \                                 In segment ABSOLUTE, at 0x6f
   \   <unnamed> volatile __io _A_TIMSK1
   \                     _A_TIMSK1:
   \   00000000                      DS 1
      7          //#include <time.h>
      8          
      9          // Структура в которую считывается счетчик процессора
     10          //typedef long long counter_t;
     11          
     12          // Время калибровки в тиках
     13          //const clock_t time_int_calibr = 18;
     14          
     15          // Число секунд в интервале
     16          //counter_t SECONDS_PER_INTERVAL = 1;
     17          // Количество отсчетов в секунде
     18          //counter_t COUNTER_PER_SECOND = 300000000;
     19          
     20          // Инициализация счетчика

   \                                 In segment FARCODE, align 2, keep-with-next
     21          void counter_init()
   \                     ??counter_init:
     22          {
     23            //Инициализация Timer1
     24            TCCR1A = 0x00;        //  Нормальный режим счета от 0 до 0xFF
   \   00000000   E000               LDI     R16, 0
   \   00000002   93000080           STS     128, R16
     25            TCCR1B = 0x05;        //  Прескалер на 1024
   \   00000006   E005               LDI     R16, 5
   \   00000008   93000081           STS     129, R16
     26            TCCR1C = 0x00;        //  Force Output Compare - пофиг
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   93000082           STS     130, R16
     27            TCNT1 = 0x0000;       //  Сброс счетчика на 0
   \   00000012   E000               LDI     R16, 0
   \   00000014   E010               LDI     R17, 0
   \   00000016   93100085           STS     133, R17
   \   0000001A   93000084           STS     132, R16
     28            OCR1A = 0xFFFF;       //  Регистры сравнения
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   EF1F               LDI     R17, 255
   \   00000022   93100089           STS     137, R17
   \   00000026   93000088           STS     136, R16
     29            OCR1B = 0xFFFF;
   \   0000002A   EF0F               LDI     R16, 255
   \   0000002C   EF1F               LDI     R17, 255
   \   0000002E   9310008B           STS     139, R17
   \   00000032   9300008A           STS     138, R16
     30            OCR1C = 0xFFFF;
   \   00000036   EF0F               LDI     R16, 255
   \   00000038   EF1F               LDI     R17, 255
   \   0000003A   9310008D           STS     141, R17
   \   0000003E   9300008C           STS     140, R16
     31            TIMSK1 = 0x00;        //  Нет прерываний от счетчика
   \   00000042   E000               LDI     R16, 0
   \   00000044   9300006F           STS     111, R16
     32          
     33          }
   \   00000048   9508               RET
     34          // Чтение счетчика

   \                                 In segment FARCODE, align 2, keep-with-next
     35          counter_t counter_get()
   \                     ??counter_get:
     36          {
     37            return TCNT1;    //  Отсчитанное количество тактов
   \   00000000   91000084           LDS     R16, 132
   \   00000004   91100085           LDS     R17, 133
   \   00000008   9508               RET
     38          }
     39          // Деинициализация счетчика

   \                                 In segment FARCODE, align 2, keep-with-next
     40          void counter_deinit()
   \                     ??counter_deinit:
     41          {
     42            //Деинициализация Timer1
     43            TCCR1B = 0x00;        //  Остановка счетчика
   \   00000000   E000               LDI     R16, 0
   \   00000002   93000081           STS     129, R16
     44          }
   \   00000006   9508               RET

   Maximum stack usage in bytes:

     Function         CSTACK RSTACK
     --------         ------ ------
     counter_deinit()     0      3
     counter_get()        0      3
     counter_init()       0      3


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     _A_OCR1C            2
     _A_OCR1B            2
     _A_OCR1A            2
     _A_TCNT1            2
     _A_TCCR1C           1
     _A_TCCR1B           1
     _A_TCCR1A           1
     _A_TIMSK1           1
     counter_init()     74
     counter_get()      10
     counter_deinit()    8

 
 12 bytes in segment ABSOLUTE
 92 bytes in segment FARCODE
 
 92 bytes of CODE memory
  0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
