##############################################################################
#                                                                            #
#                                                      13/Jul/2007  11:42:42 #
# IAR Atmel AVR C/C++ Compiler V4.11A/W32, Evaluation Version                #
# Copyright 1996-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\timer.cpp        #
#    Command line =  S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\timer.cpp        #
#                    --cpu=m2561 -ms -o S:\Files\ASUTP\U309M\prjs\avr\libtst #
#                    \Debug\Obj\ -lC S:\Files\ASUTP\U309M\prjs\avr\libtst\De #
#                    bug\List\ -y --initializers_in_flash -z2 --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call            #
#                    --no_clustering --no_tbaa --debug                       #
#                    -DENABLE_BIT_DEFINITIONS -e -I                          #
#                    S:\Files\ASUTP\U309M\prjs\avr\libtst\..\mxsrclib\arch\c #
#                    ur\ -I S:\Files\ASUTP\U309M\prjs\avr\libtst\..\mxsrclib #
#                    \ -I "D:\Program Files\IAR Systems\Embedded Workbench   #
#                    4.0 Evaluation\avr\INC\" -I "D:\Program Files\IAR       #
#                    Systems\Embedded Workbench 4.0                          #
#                    Evaluation\avr\INC\DLIB\" --eeprom_size 4096 --eec++    #
#                    --dlib_config "D:\Program Files\IAR Systems\Embedded    #
#                    Workbench 4.0 Evaluation\avr\LIB\DLIB\dlAVR-5s-ec-n.h"  #
#    List file    =  S:\Files\ASUTP\U309M\prjs\avr\libtst\Debug\List\timer.l #
#                    st                                                      #
#    Object file  =  S:\Files\ASUTP\U309M\prjs\avr\libtst\Debug\Obj\timer.r9 #
#                    0                                                       #
#                                                                            #
#                                                                            #
##############################################################################

S:\Files\ASUTP\U309M\prjs\avr\mxsrclib\timer.cpp
      1          // Работа с таймером
      2          // Версия 0.7
      3          //---------------------------------------------------------------------------
      4          #include <timer.h>
      5          #include <irsdefs.h>
      6          //---------------------------------------------------------------------------
      7          // Установка таймаута t по переменной counter

   \                                 In segment FARCODE, align 2, keep-with-next
      8          void set_to_cnt(counter_t &to, counter_t t)
   \                     ??set_to_cnt:
      9          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
     10            to = counter_get() + t;
   \   00000008   ........           CALL    ??counter_get
   \   0000000C   0F08               ADD     R16, R24
   \   0000000E   1F19               ADC     R17, R25
   \   00000010   930D               ST      X+, R16
   \   00000012   931C               ST      X, R17
     11          }
   \   00000014   E0E4               LDI     R30, 4
   \   00000016   ........           JMP     ?EPILOGUE_B4_L09
     12          // Установка следующего таймаута t по переменной counter

   \                                 In segment FARCODE, align 2, keep-with-next
     13          void next_to_cnt(counter_t &to, counter_t t)
   \                     ??next_to_cnt:
     14          {
     15            to += t;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8140               LD      R20, Z
   \   00000004   8151               LDD     R21, Z+1
   \   00000006   0F42               ADD     R20, R18
   \   00000008   1F53               ADC     R21, R19
   \   0000000A   8340               ST      Z, R20
   \   0000000C   8351               STD     Z+1, R21
     16          }
   \   0000000E   9508               RET
     17          // Проверка таймаута по переменной counter

   \                                 In segment FARCODE, align 2, keep-with-next
     18          irs_bool test_to_cnt(counter_t to)
   \                     ??test_to_cnt:
     19          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     20            irs_bool res = irs_false;
   \   00000006   E080               LDI     R24, 0
     21            if (counter_get() - to > 0) res = irs_true;
   \   00000008   ........           CALL    ??counter_get
   \   0000000C   1B0A               SUB     R16, R26
   \   0000000E   0B1B               SBC     R17, R27
   \   00000010   3001               CPI     R16, 1
   \   00000012   4010               SBCI    R17, 0
   \   00000014   F00C               BRLT    ??test_to_cnt_1
   \   00000016   E081               LDI     R24, 1
     22            return res;
   \                     ??test_to_cnt_1:
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   E0E4               LDI     R30, 4
   \   0000001C   ........           JMP     ?EPILOGUE_B4_L09
     23          }
     24          // Инициализация таймера

   \                                 In segment FARCODE, align 2, keep-with-next
     25          void init_to_cnt()
   \                     ??init_to_cnt:
     26          {
     27            counter_init();
   \   00000000   ........           CALL    ??counter_init
     28          }
   \   00000004   9508               RET
     29          // Деинициализация таймера

   \                                 In segment FARCODE, align 2, keep-with-next
     30          void deinit_to_cnt()
   \                     ??deinit_to_cnt:
     31          {
     32            counter_deinit();
   \   00000000   ........           CALL    ??counter_deinit
     33          }
   \   00000004   9508               RET
     34          //---------------------------------------------------------------------------
     35          // Вычисление времени циклических процессов

   \                                 In segment FARCODE, align 2, keep-with-next
     36          void mx_time_int_t::init()
   \                     ??init:
     37          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     38            init_to_cnt();
   \   00000006   ....               RCALL   ??init_to_cnt
     39            _first = irs_true;
   \   00000008   E001               LDI     R16, 1
   \   0000000A   930C               ST      X, R16
     40            cnt_prev = 0;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   E010               LDI     R17, 0
   \   00000010   9611               ADIW    R27:R26, 1
   \   00000012   930D               ST      X+, R16
   \   00000014   931C               ST      X, R17
   \   00000016   9712               SBIW    R27:R26, 2
     41            show_int_to = 0;
   \   00000018   E000               LDI     R16, 0
   \   0000001A   E010               LDI     R17, 0
   \   0000001C   9613               ADIW    R27:R26, 3
   \   0000001E   930D               ST      X+, R16
   \   00000020   931C               ST      X, R17
   \   00000022   9714               SBIW    R27:R26, 4
     42            show_int_t = TIME_TO_CNT(1, 1);
   \   00000024   E009               LDI     R16, 9
   \   00000026   E31D               LDI     R17, 61
   \   00000028   9615               ADIW    R27:R26, 5
   \   0000002A   930D               ST      X+, R16
   \   0000002C   931C               ST      X, R17
   \   0000002E   9716               SBIW    R27:R26, 6
     43            count_loop = 0;
   \   00000030   E000               LDI     R16, 0
   \   00000032   E010               LDI     R17, 0
   \   00000034   E020               LDI     R18, 0
   \   00000036   E030               LDI     R19, 0
   \   00000038   9617               ADIW    R27:R26, 7
   \   0000003A   930D               ST      X+, R16
   \   0000003C   931D               ST      X+, R17
   \   0000003E   932D               ST      X+, R18
   \   00000040   933C               ST      X, R19
   \   00000042   971A               SBIW    R27:R26, 10
     44            time_int = 0;
   \   00000044   E000               LDI     R16, 0
   \   00000046   E010               LDI     R17, 0
   \   00000048   E020               LDI     R18, 0
   \   0000004A   E030               LDI     R19, 0
   \   0000004C   961B               ADIW    R27:R26, 11
   \   0000004E   930D               ST      X+, R16
   \   00000050   931D               ST      X+, R17
   \   00000052   932D               ST      X+, R18
   \   00000054   933C               ST      X, R19
     45          }
   \   00000056   91A9               LD      R26, Y+
   \   00000058   91B9               LD      R27, Y+
   \   0000005A   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
     46          mx_time_int_t::mx_time_int_t()
   \                     ??mx_time_int_t:
     47          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     48            init();
   \   00000006   018C               MOVW    R17:R16, R25:R24
   \   00000008   ....               RCALL   ??init
     49          }
   \   0000000A   018C               MOVW    R17:R16, R25:R24
   \   0000000C   9189               LD      R24, Y+
   \   0000000E   9199               LD      R25, Y+
   \   00000010   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
     50          mx_time_int_t::mx_time_int_t(counter_t time_cnt)
   \                     ??mx_time_int_t_1:
     51          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     52            init();
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   ....               RCALL   ??init
     53            set_show_int(time_cnt);
   \   0000000C   019D               MOVW    R19:R18, R27:R26
   \   0000000E   018C               MOVW    R17:R16, R25:R24
   \   00000010   ....               RCALL   ??set_show_int
     54          }
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   E0E4               LDI     R30, 4
   \   00000016   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment FARCODE, align 2, keep-with-next
     55          mx_time_int_t::mx_time_int_t(double time)
   \                     ??mx_time_int_t_2:
     56          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
     57            init();
   \   0000000A   0182               MOVW    R17:R16, R5:R4
   \   0000000C   ....               RCALL   ??init
     58            set_show_int(time);
   \   0000000E   01AC               MOVW    R21:R20, R25:R24
   \   00000010   01BD               MOVW    R23:R22, R27:R26
   \   00000012   0182               MOVW    R17:R16, R5:R4
   \   00000014   ....               RCALL   ??set_show_int_1
     59          }
   \   00000016   0182               MOVW    R17:R16, R5:R4
   \   00000018   E0E6               LDI     R30, 6
   \   0000001A   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In segment FARCODE, align 2, keep-with-next
     60          mx_time_int_t::~mx_time_int_t()
   \                     `?~mx_time_int_t`:
     61          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     62            deinit_to_cnt();
   \   00000004   ....               RCALL   ??deinit_to_cnt
     63          }
   \   00000006   9189               LD      R24, Y+
   \   00000008   9199               LD      R25, Y+
   \   0000000A   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
     64          void mx_time_int_t::set_show_int(counter_t time_cnt)
   \                     ??set_show_int:
     65          {
     66            show_int_t = time_cnt;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8325               STD     Z+5, R18
   \   00000004   8336               STD     Z+6, R19
     67          }
   \   00000006   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
     68          void mx_time_int_t::set_show_int(double time)
   \                     ??set_show_int_1:
     69          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
     70            show_int_t = DBLTIME_TO_CNT(time);
   \   0000000A   0182               MOVW    R17:R16, R5:R4
   \   0000000C   0193               MOVW    R19:R18, R7:R6
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E254               LDI     R21, 36
   \   00000012   E764               LDI     R22, 116
   \   00000014   E477               LDI     R23, 71
   \   00000016   ........           CALL    ?F_MUL_L04
   \   0000001A   E040               LDI     R20, 0
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   E860               LDI     R22, 128
   \   00000020   E470               LDI     R23, 64
   \   00000022   ........           CALL    ?F_DIV_L04
   \   00000026   ........           CALL    ?F2L_L04
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8305               STD     Z+5, R16
   \   0000002E   8316               STD     Z+6, R17
     71          }
   \   00000030   E0E8               LDI     R30, 8
   \   00000032   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In segment FARCODE, align 2, keep-with-next
     72          double mx_time_int_t::operator()()
   \                     `??operator()`:
     73          {
   \   00000000   ........           CALL    ?PROLOGUE10_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     74            if (_first) {
   \   00000006   910C               LD      R16, X
   \   00000008   2300               TST     R16
   \   0000000A   F079               BREQ    `??operator()_2`
     75              _first = irs_false;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   930C               ST      X, R16
     76              cnt_prev = counter_get();
   \   00000010   ........           CALL    ??counter_get
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8301               STD     Z+1, R16
   \   00000018   8312               STD     Z+2, R17
     77              set_to_cnt(show_int_to, show_int_t);
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8125               LDD     R18, Z+5
   \   0000001E   8136               LDD     R19, Z+6
   \   00000020   018D               MOVW    R17:R16, R27:R26
   \   00000022   5F0D               SUBI    R16, 253
   \   00000024   4F1F               SBCI    R17, 255
   \   00000026   ....               RCALL   ??set_to_cnt
   \   00000028   C058               RJMP    `??operator()_3`
     78            } else {
     79              count_loop++;
   \                     `??operator()_2`:
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8107               LDD     R16, Z+7
   \   0000002E   8510               LDD     R17, Z+8
   \   00000030   8521               LDD     R18, Z+9
   \   00000032   8532               LDD     R19, Z+10
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   4F2F               SBCI    R18, 255
   \   0000003A   4F3F               SBCI    R19, 255
   \   0000003C   8307               STD     Z+7, R16
   \   0000003E   8710               STD     Z+8, R17
   \   00000040   8721               STD     Z+9, R18
   \   00000042   8732               STD     Z+10, R19
     80              if (test_to_cnt(show_int_to)) {
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8103               LDD     R16, Z+3
   \   00000048   8114               LDD     R17, Z+4
   \   0000004A   ....               RCALL   ??test_to_cnt
   \   0000004C   2300               TST     R16
   \   0000004E   F409               BRNE    $+2+2
   \   00000050   C044               RJMP    `??operator()_3`
     81                set_to_cnt(show_int_to, show_int_t);
   \   00000052   01FD               MOVW    R31:R30, R27:R26
   \   00000054   8125               LDD     R18, Z+5
   \   00000056   8136               LDD     R19, Z+6
   \   00000058   018D               MOVW    R17:R16, R27:R26
   \   0000005A   5F0D               SUBI    R16, 253
   \   0000005C   4F1F               SBCI    R17, 255
   \   0000005E   ....               RCALL   ??set_to_cnt
     82                counter_t cnt_cur = counter_get();
   \   00000060   ........           CALL    ??counter_get
   \   00000064   01C8               MOVW    R25:R24, R17:R16
     83                counter_t cnt_int = cnt_cur - cnt_prev;
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8101               LDD     R16, Z+1
   \   0000006A   8112               LDD     R17, Z+2
   \   0000006C   019C               MOVW    R19:R18, R25:R24
   \   0000006E   1B20               SUB     R18, R16
   \   00000070   0B31               SBC     R19, R17
   \   00000072   0149               MOVW    R9:R8, R19:R18
     84                cnt_prev = cnt_cur;
   \   00000074   01FD               MOVW    R31:R30, R27:R26
   \   00000076   8381               STD     Z+1, R24
   \   00000078   8392               STD     Z+2, R25
     85                time_int = CNT_TO_DBLTIME(double(cnt_int)/double(count_loop));
   \   0000007A   0184               MOVW    R17:R16, R9:R8
   \   0000007C   2F21               MOV     R18, R17
   \   0000007E   0F22               LSL     R18
   \   00000080   0B22               SBC     R18, R18
   \   00000082   2F32               MOV     R19, R18
   \   00000084   ........           CALL    ?SL2F_L04
   \   00000088   0128               MOVW    R5:R4, R17:R16
   \   0000008A   0139               MOVW    R7:R6, R19:R18
   \   0000008C   01FD               MOVW    R31:R30, R27:R26
   \   0000008E   8107               LDD     R16, Z+7
   \   00000090   8510               LDD     R17, Z+8
   \   00000092   8521               LDD     R18, Z+9
   \   00000094   8532               LDD     R19, Z+10
   \   00000096   ........           CALL    ?UL2F_L04
   \   0000009A   01A8               MOVW    R21:R20, R17:R16
   \   0000009C   01B9               MOVW    R23:R22, R19:R18
   \   0000009E   0182               MOVW    R17:R16, R5:R4
   \   000000A0   0193               MOVW    R19:R18, R7:R6
   \   000000A2   ........           CALL    ?F_DIV_L04
   \   000000A6   E040               LDI     R20, 0
   \   000000A8   E050               LDI     R21, 0
   \   000000AA   E860               LDI     R22, 128
   \   000000AC   E470               LDI     R23, 64
   \   000000AE   ........           CALL    ?F_MUL_L04
   \   000000B2   E040               LDI     R20, 0
   \   000000B4   E254               LDI     R21, 36
   \   000000B6   E764               LDI     R22, 116
   \   000000B8   E477               LDI     R23, 71
   \   000000BA   ........           CALL    ?F_DIV_L04
   \   000000BE   01FD               MOVW    R31:R30, R27:R26
   \   000000C0   8703               STD     Z+11, R16
   \   000000C2   8714               STD     Z+12, R17
   \   000000C4   8725               STD     Z+13, R18
   \   000000C6   8736               STD     Z+14, R19
     86                count_loop = 0;
   \   000000C8   E000               LDI     R16, 0
   \   000000CA   E010               LDI     R17, 0
   \   000000CC   E020               LDI     R18, 0
   \   000000CE   E030               LDI     R19, 0
   \   000000D0   01FD               MOVW    R31:R30, R27:R26
   \   000000D2   8307               STD     Z+7, R16
   \   000000D4   8710               STD     Z+8, R17
   \   000000D6   8721               STD     Z+9, R18
   \   000000D8   8732               STD     Z+10, R19
     87              }
     88            }
     89            return time_int;
   \                     `??operator()_3`:
   \   000000DA   01FD               MOVW    R31:R30, R27:R26
   \   000000DC   8503               LDD     R16, Z+11
   \   000000DE   8514               LDD     R17, Z+12
   \   000000E0   8525               LDD     R18, Z+13
   \   000000E2   8536               LDD     R19, Z+14
   \   000000E4   E0EA               LDI     R30, 10
   \   000000E6   ........           JMP     ?EPILOGUE_B10_L09
     90          }
     91          //---------------------------------------------------------------------------
     92          // Вычисление времени нециклических процессов

   \                                 In segment FARCODE, align 2, keep-with-next
     93          void mx_time_int_local_t::init()
   \                     ??init_1:
     94          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     95            init_to_cnt();
   \   00000006   ....               RCALL   ??init_to_cnt
     96            first_step = irs_false;
   \   00000008   E000               LDI     R16, 0
   \   0000000A   930C               ST      X, R16
     97            _first = irs_true;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   9611               ADIW    R27:R26, 1
   \   00000010   930C               ST      X, R16
   \   00000012   9711               SBIW    R27:R26, 1
     98            cnt_prev = 0;
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9612               ADIW    R27:R26, 2
   \   0000001A   930D               ST      X+, R16
   \   0000001C   931C               ST      X, R17
   \   0000001E   9713               SBIW    R27:R26, 3
     99            show_int_to = 0;
   \   00000020   E000               LDI     R16, 0
   \   00000022   E010               LDI     R17, 0
   \   00000024   9614               ADIW    R27:R26, 4
   \   00000026   930D               ST      X+, R16
   \   00000028   931C               ST      X, R17
   \   0000002A   9715               SBIW    R27:R26, 5
    100            show_int_t = TIME_TO_CNT(1, 1);
   \   0000002C   E009               LDI     R16, 9
   \   0000002E   E31D               LDI     R17, 61
   \   00000030   9616               ADIW    R27:R26, 6
   \   00000032   930D               ST      X+, R16
   \   00000034   931C               ST      X, R17
   \   00000036   9717               SBIW    R27:R26, 7
    101            count_loop = 0;
   \   00000038   E000               LDI     R16, 0
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   E020               LDI     R18, 0
   \   0000003E   E030               LDI     R19, 0
   \   00000040   9618               ADIW    R27:R26, 8
   \   00000042   930D               ST      X+, R16
   \   00000044   931D               ST      X+, R17
   \   00000046   932D               ST      X+, R18
   \   00000048   933C               ST      X, R19
   \   0000004A   971B               SBIW    R27:R26, 11
    102            time_int = 0;
   \   0000004C   E000               LDI     R16, 0
   \   0000004E   E010               LDI     R17, 0
   \   00000050   E020               LDI     R18, 0
   \   00000052   E030               LDI     R19, 0
   \   00000054   961C               ADIW    R27:R26, 12
   \   00000056   930D               ST      X+, R16
   \   00000058   931D               ST      X+, R17
   \   0000005A   932D               ST      X+, R18
   \   0000005C   933C               ST      X, R19
   \   0000005E   971F               SBIW    R27:R26, 15
    103            cnt_int = 0;
   \   00000060   E000               LDI     R16, 0
   \   00000062   E010               LDI     R17, 0
   \   00000064   9650               ADIW    R27:R26, 16
   \   00000066   930D               ST      X+, R16
   \   00000068   931C               ST      X, R17
    104          }
   \   0000006A   91A9               LD      R26, Y+
   \   0000006C   91B9               LD      R27, Y+
   \   0000006E   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
    105          mx_time_int_local_t::mx_time_int_local_t()
   \                     ??mx_time_int_local_t:
    106          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    107            deinit_to_cnt();
   \   00000006   ....               RCALL   ??deinit_to_cnt
    108            init();
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   ....               RCALL   ??init_1
    109          }
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   9189               LD      R24, Y+
   \   00000010   9199               LD      R25, Y+
   \   00000012   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
    110          mx_time_int_local_t::mx_time_int_local_t(counter_t time_cnt)
   \                     ??mx_time_int_local_t_1:
    111          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
    112            init();
   \   00000008   018C               MOVW    R17:R16, R25:R24
   \   0000000A   ....               RCALL   ??init_1
    113            set_show_int(time_cnt);
   \   0000000C   019D               MOVW    R19:R18, R27:R26
   \   0000000E   018C               MOVW    R17:R16, R25:R24
   \   00000010   ....               RCALL   ??set_show_int_2
    114          }
   \   00000012   018C               MOVW    R17:R16, R25:R24
   \   00000014   E0E4               LDI     R30, 4
   \   00000016   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment FARCODE, align 2, keep-with-next
    115          mx_time_int_local_t::mx_time_int_local_t(double time)
   \                     ??mx_time_int_local_t_2:
    116          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   0128               MOVW    R5:R4, R17:R16
   \   00000006   01CA               MOVW    R25:R24, R21:R20
   \   00000008   01DB               MOVW    R27:R26, R23:R22
    117            init();
   \   0000000A   0182               MOVW    R17:R16, R5:R4
   \   0000000C   ....               RCALL   ??init_1
    118            set_show_int(time);
   \   0000000E   01AC               MOVW    R21:R20, R25:R24
   \   00000010   01BD               MOVW    R23:R22, R27:R26
   \   00000012   0182               MOVW    R17:R16, R5:R4
   \   00000014   ....               RCALL   ??set_show_int_3
    119          }
   \   00000016   0182               MOVW    R17:R16, R5:R4
   \   00000018   E0E6               LDI     R30, 6
   \   0000001A   ........           JMP     ?EPILOGUE_B6_L09

   \                                 In segment FARCODE, align 2, keep-with-next
    120          mx_time_int_local_t::~mx_time_int_local_t()
   \                     `?~mx_time_int_local_t`:
    121          {
    122          }
   \   00000000   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
    123          void mx_time_int_local_t::set_show_int(counter_t time_cnt)
   \                     ??set_show_int_2:
    124          {
    125            show_int_t = time_cnt;
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8326               STD     Z+6, R18
   \   00000004   8337               STD     Z+7, R19
    126          }
   \   00000006   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
    127          void mx_time_int_local_t::set_show_int(double time)
   \                     ??set_show_int_3:
    128          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   012A               MOVW    R5:R4, R21:R20
   \   00000008   013B               MOVW    R7:R6, R23:R22
    129            show_int_t = DBLTIME_TO_CNT(time);
   \   0000000A   0182               MOVW    R17:R16, R5:R4
   \   0000000C   0193               MOVW    R19:R18, R7:R6
   \   0000000E   E040               LDI     R20, 0
   \   00000010   E254               LDI     R21, 36
   \   00000012   E764               LDI     R22, 116
   \   00000014   E477               LDI     R23, 71
   \   00000016   ........           CALL    ?F_MUL_L04
   \   0000001A   E040               LDI     R20, 0
   \   0000001C   E050               LDI     R21, 0
   \   0000001E   E860               LDI     R22, 128
   \   00000020   E470               LDI     R23, 64
   \   00000022   ........           CALL    ?F_DIV_L04
   \   00000026   ........           CALL    ?F2L_L04
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8306               STD     Z+6, R16
   \   0000002E   8317               STD     Z+7, R17
    130          }
   \   00000030   E0E8               LDI     R30, 8
   \   00000032   ........           JMP     ?EPILOGUE_B8_L09

   \                                 In segment FARCODE, align 2, keep-with-next
    131          double mx_time_int_local_t::operator()()
   \                     `??operator()_1`:
    132          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    133            if (_first) {
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   8101               LDD     R16, Z+1
   \   0000000A   2300               TST     R16
   \   0000000C   F059               BREQ    `??operator()_4`
    134              _first = irs_false;
   \   0000000E   E000               LDI     R16, 0
   \   00000010   01FD               MOVW    R31:R30, R27:R26
   \   00000012   8301               STD     Z+1, R16
    135              set_to_cnt(show_int_to, show_int_t);
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   8126               LDD     R18, Z+6
   \   00000018   8137               LDD     R19, Z+7
   \   0000001A   018D               MOVW    R17:R16, R27:R26
   \   0000001C   5F0C               SUBI    R16, 252
   \   0000001E   4F1F               SBCI    R17, 255
   \   00000020   ....               RCALL   ??set_to_cnt
   \   00000022   C06E               RJMP    `??operator()_5`
    136            } else {
    137              if (first_step) {
   \                     `??operator()_4`:
   \   00000024   910C               LD      R16, X
   \   00000026   2300               TST     R16
   \   00000028   F041               BREQ    `??operator()_6`
    138                first_step = irs_false;
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   930C               ST      X, R16
    139                cnt_prev = counter_get();
   \   0000002E   ........           CALL    ??counter_get
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8302               STD     Z+2, R16
   \   00000036   8313               STD     Z+3, R17
   \   00000038   C063               RJMP    `??operator()_5`
    140              } else {
    141                counter_t cnt_cur = counter_get();
   \                     `??operator()_6`:
   \   0000003A   ........           CALL    ??counter_get
   \   0000003E   01C8               MOVW    R25:R24, R17:R16
    142                first_step = irs_true;
   \   00000040   E001               LDI     R16, 1
   \   00000042   930C               ST      X, R16
    143                count_loop++;
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8500               LDD     R16, Z+8
   \   00000048   8511               LDD     R17, Z+9
   \   0000004A   8522               LDD     R18, Z+10
   \   0000004C   8533               LDD     R19, Z+11
   \   0000004E   5F0F               SUBI    R16, 255
   \   00000050   4F1F               SBCI    R17, 255
   \   00000052   4F2F               SBCI    R18, 255
   \   00000054   4F3F               SBCI    R19, 255
   \   00000056   8700               STD     Z+8, R16
   \   00000058   8711               STD     Z+9, R17
   \   0000005A   8722               STD     Z+10, R18
   \   0000005C   8733               STD     Z+11, R19
    144                cnt_int += (cnt_cur - cnt_prev);
   \   0000005E   01FD               MOVW    R31:R30, R27:R26
   \   00000060   8900               LDD     R16, Z+16
   \   00000062   8911               LDD     R17, Z+17
   \   00000064   0F08               ADD     R16, R24
   \   00000066   1F19               ADC     R17, R25
   \   00000068   01FD               MOVW    R31:R30, R27:R26
   \   0000006A   8122               LDD     R18, Z+2
   \   0000006C   8133               LDD     R19, Z+3
   \   0000006E   1B02               SUB     R16, R18
   \   00000070   0B13               SBC     R17, R19
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   8B00               STD     Z+16, R16
   \   00000076   8B11               STD     Z+17, R17
    145                if (test_to_cnt(show_int_to)) {
   \   00000078   01FD               MOVW    R31:R30, R27:R26
   \   0000007A   8104               LDD     R16, Z+4
   \   0000007C   8115               LDD     R17, Z+5
   \   0000007E   ....               RCALL   ??test_to_cnt
   \   00000080   2300               TST     R16
   \   00000082   F1F1               BREQ    `??operator()_5`
    146                  set_to_cnt(show_int_to, show_int_t);
   \   00000084   01FD               MOVW    R31:R30, R27:R26
   \   00000086   8126               LDD     R18, Z+6
   \   00000088   8137               LDD     R19, Z+7
   \   0000008A   018D               MOVW    R17:R16, R27:R26
   \   0000008C   5F0C               SUBI    R16, 252
   \   0000008E   4F1F               SBCI    R17, 255
   \   00000090   ....               RCALL   ??set_to_cnt
    147                  //cnt_prev = cnt_cur;
    148                  time_int = CNT_TO_DBLTIME(double(cnt_int)/double(count_loop));
   \   00000092   01FD               MOVW    R31:R30, R27:R26
   \   00000094   8900               LDD     R16, Z+16
   \   00000096   8911               LDD     R17, Z+17
   \   00000098   2F21               MOV     R18, R17
   \   0000009A   0F22               LSL     R18
   \   0000009C   0B22               SBC     R18, R18
   \   0000009E   2F32               MOV     R19, R18
   \   000000A0   ........           CALL    ?SL2F_L04
   \   000000A4   0128               MOVW    R5:R4, R17:R16
   \   000000A6   0139               MOVW    R7:R6, R19:R18
   \   000000A8   01FD               MOVW    R31:R30, R27:R26
   \   000000AA   8500               LDD     R16, Z+8
   \   000000AC   8511               LDD     R17, Z+9
   \   000000AE   8522               LDD     R18, Z+10
   \   000000B0   8533               LDD     R19, Z+11
   \   000000B2   ........           CALL    ?UL2F_L04
   \   000000B6   01A8               MOVW    R21:R20, R17:R16
   \   000000B8   01B9               MOVW    R23:R22, R19:R18
   \   000000BA   0182               MOVW    R17:R16, R5:R4
   \   000000BC   0193               MOVW    R19:R18, R7:R6
   \   000000BE   ........           CALL    ?F_DIV_L04
   \   000000C2   E040               LDI     R20, 0
   \   000000C4   E050               LDI     R21, 0
   \   000000C6   E860               LDI     R22, 128
   \   000000C8   E470               LDI     R23, 64
   \   000000CA   ........           CALL    ?F_MUL_L04
   \   000000CE   E040               LDI     R20, 0
   \   000000D0   E254               LDI     R21, 36
   \   000000D2   E764               LDI     R22, 116
   \   000000D4   E477               LDI     R23, 71
   \   000000D6   ........           CALL    ?F_DIV_L04
   \   000000DA   01FD               MOVW    R31:R30, R27:R26
   \   000000DC   8704               STD     Z+12, R16
   \   000000DE   8715               STD     Z+13, R17
   \   000000E0   8726               STD     Z+14, R18
   \   000000E2   8737               STD     Z+15, R19
    149                  count_loop = 0;
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   E010               LDI     R17, 0
   \   000000E8   E020               LDI     R18, 0
   \   000000EA   E030               LDI     R19, 0
   \   000000EC   01FD               MOVW    R31:R30, R27:R26
   \   000000EE   8700               STD     Z+8, R16
   \   000000F0   8711               STD     Z+9, R17
   \   000000F2   8722               STD     Z+10, R18
   \   000000F4   8733               STD     Z+11, R19
    150                  cnt_int = 0;
   \   000000F6   E000               LDI     R16, 0
   \   000000F8   E010               LDI     R17, 0
   \   000000FA   01FD               MOVW    R31:R30, R27:R26
   \   000000FC   8B00               STD     Z+16, R16
   \   000000FE   8B11               STD     Z+17, R17
    151                }
    152              }
    153            }
    154            return time_int;
   \                     `??operator()_5`:
   \   00000100   01FD               MOVW    R31:R30, R27:R26
   \   00000102   8504               LDD     R16, Z+12
   \   00000104   8515               LDD     R17, Z+13
   \   00000106   8526               LDD     R18, Z+14
   \   00000108   8537               LDD     R19, Z+15
   \   0000010A   E0E8               LDI     R30, 8
   \   0000010C   ........           JMP     ?EPILOGUE_B8_L09
    155          }

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_t &mx_time_int_t::new mx_time_int_t()
   \                     `??new mx_time_int_t`:
   \   00000000   E00F               LDI     R16, 15
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new mx_time_int_t_3`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??mx_time_int_t
   \   00000012   9508               RET
   \                     `??new mx_time_int_t_3`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_t &mx_time_int_t::new mx_time_int_t(irs_i16)
   \                     `??new mx_time_int_t_1`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   E00F               LDI     R16, 15
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    `??operator new`
   \   0000000E   01A8               MOVW    R21:R20, R17:R16
   \   00000010   2B01               OR      R16, R17
   \   00000012   F021               BREQ    `??new mx_time_int_t_4`
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   018A               MOVW    R17:R16, R21:R20
   \   00000018   ....               RCALL   ??mx_time_int_t_1
   \   0000001A   C002               RJMP    `??new mx_time_int_t_5`
   \                     `??new mx_time_int_t_4`:
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \                     `??new mx_time_int_t_5`:
   \   00000020   9189               LD      R24, Y+
   \   00000022   9199               LD      R25, Y+
   \   00000024   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_t &mx_time_int_t::new mx_time_int_t(double)
   \                     `??new mx_time_int_t_2`:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   E00F               LDI     R16, 15
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    `??operator new`
   \   00000010   0198               MOVW    R19:R18, R17:R16
   \   00000012   2B01               OR      R16, R17
   \   00000014   F029               BREQ    `??new mx_time_int_t_6`
   \   00000016   01AC               MOVW    R21:R20, R25:R24
   \   00000018   01BD               MOVW    R23:R22, R27:R26
   \   0000001A   0189               MOVW    R17:R16, R19:R18
   \   0000001C   ....               RCALL   ??mx_time_int_t_2
   \   0000001E   C002               RJMP    `??new mx_time_int_t_7`
   \                     `??new mx_time_int_t_6`:
   \   00000020   E000               LDI     R16, 0
   \   00000022   E010               LDI     R17, 0
   \                     `??new mx_time_int_t_7`:
   \   00000024   E0E4               LDI     R30, 4
   \   00000026   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void mx_time_int_t::delete ~mx_time_int_t(mx_time_int_t *)
   \                     `??delete ~mx_time_int_t`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2F08               MOV     R16, R24
   \   00000008   2B09               OR      R16, R25
   \   0000000A   F029               BREQ    `??delete ~mx_time_int_t_1`
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   ....               RCALL   `?~mx_time_int_t`
   \   00000010   018C               MOVW    R17:R16, R25:R24
   \   00000012   ........           CALL    `??operator delete`
   \                     `??delete ~mx_time_int_t_1`:
   \   00000016   9189               LD      R24, Y+
   \   00000018   9199               LD      R25, Y+
   \   0000001A   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_local_t &mx_time_int_local_t::new mx_time_int_local_t()
   \                     `??new mx_time_int_local_t`:
   \   00000000   E102               LDI     R16, 18
   \   00000002   E010               LDI     R17, 0
   \   00000004   ........           CALL    `??operator new`
   \   00000008   0198               MOVW    R19:R18, R17:R16
   \   0000000A   2B01               OR      R16, R17
   \   0000000C   F019               BREQ    `??new mx_time_int_local_t_3`
   \   0000000E   0189               MOVW    R17:R16, R19:R18
   \   00000010   ....               RCALL   ??mx_time_int_local_t
   \   00000012   9508               RET
   \                     `??new mx_time_int_local_t_3`:
   \   00000014   E000               LDI     R16, 0
   \   00000016   E010               LDI     R17, 0
   \   00000018   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_local_t &mx_time_int_local_t::new mx_time_int_local_t(irs_i16)
   \                     `??new mx_time_int_local_t_1`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   E102               LDI     R16, 18
   \   00000008   E010               LDI     R17, 0
   \   0000000A   ........           CALL    `??operator new`
   \   0000000E   01A8               MOVW    R21:R20, R17:R16
   \   00000010   2B01               OR      R16, R17
   \   00000012   F021               BREQ    `??new mx_time_int_local_t_4`
   \   00000014   019C               MOVW    R19:R18, R25:R24
   \   00000016   018A               MOVW    R17:R16, R21:R20
   \   00000018   ....               RCALL   ??mx_time_int_local_t_1
   \   0000001A   C002               RJMP    `??new mx_time_int_local_t_5`
   \                     `??new mx_time_int_local_t_4`:
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   E010               LDI     R17, 0
   \                     `??new mx_time_int_local_t_5`:
   \   00000020   9189               LD      R24, Y+
   \   00000022   9199               LD      R25, Y+
   \   00000024   9508               RET

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 mx_time_int_local_t &mx_time_int_local_t::new mx_time_int_local_t(double)
   \                     `??new mx_time_int_local_t_2`:
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   \   00000008   E102               LDI     R16, 18
   \   0000000A   E010               LDI     R17, 0
   \   0000000C   ........           CALL    `??operator new`
   \   00000010   0198               MOVW    R19:R18, R17:R16
   \   00000012   2B01               OR      R16, R17
   \   00000014   F029               BREQ    `??new mx_time_int_local_t_6`
   \   00000016   01AC               MOVW    R21:R20, R25:R24
   \   00000018   01BD               MOVW    R23:R22, R27:R26
   \   0000001A   0189               MOVW    R17:R16, R19:R18
   \   0000001C   ....               RCALL   ??mx_time_int_local_t_2
   \   0000001E   C002               RJMP    `??new mx_time_int_local_t_7`
   \                     `??new mx_time_int_local_t_6`:
   \   00000020   E000               LDI     R16, 0
   \   00000022   E010               LDI     R17, 0
   \                     `??new mx_time_int_local_t_7`:
   \   00000024   E0E4               LDI     R30, 4
   \   00000026   ........           JMP     ?EPILOGUE_B4_L09

   \                                 In segment FARCODE, align 2, keep-with-next
   \   __farfunc __version_3 void mx_time_int_local_t::delete ~mx_time_int_local_t(mx_time_int_local_t *)
   \                     `??delete ~mx_time_int_local_t`:
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2F08               MOV     R16, R24
   \   00000008   2B09               OR      R16, R25
   \   0000000A   F029               BREQ    `??delete ~mx_time_int_local_t_1`
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   ....               RCALL   `?~mx_time_int_local_t`
   \   00000010   018C               MOVW    R17:R16, R25:R24
   \   00000012   ........           CALL    `??operator delete`
   \                     `??delete ~mx_time_int_local_t_1`:
   \   00000016   9189               LD      R24, Y+
   \   00000018   9199               LD      R25, Y+
   \   0000001A   9508               RET
    156          //---------------------------------------------------------------------------
    157          

   Maximum stack usage in bytes:

     Function                       CSTACK RSTACK
     --------                       ------ ------
     deinit_to_cnt()                    0      3
       -> counter_deinit()              0      3
     init_to_cnt()                      0      3
       -> counter_init()                0      3
     mx_time_int_local_t::delete ~mx_time_int_local_t(mx_time_int_local_t *)
                                        2      3
       -> mx_time_int_local_t::~mx_time_int_local_t()
                                        2      3
       -> operator delete(void *)       2      3
     mx_time_int_local_t::init()        2      3
       -> init_to_cnt()                 2      3
     mx_time_int_local_t::mx_time_int_local_t()
                                        2      3
       -> deinit_to_cnt()               2      3
       -> mx_time_int_local_t::init()
                                        2      3
     mx_time_int_local_t::mx_time_int_local_t(double)
                                        6      3
       -> mx_time_int_local_t::init()
                                        6      3
       -> mx_time_int_local_t::set_show_int(double)
                                        6      3
     mx_time_int_local_t::mx_time_int_local_t(irs_i16)
                                        4      3
       -> mx_time_int_local_t::init()
                                        4      3
       -> mx_time_int_local_t::set_show_int(irs_i16)
                                        4      3
     mx_time_int_local_t::new mx_time_int_local_t()
                                        0      3
       -> operator new(unsigned int)
                                        0      3
       -> mx_time_int_local_t::mx_time_int_local_t()
                                        0      3
     mx_time_int_local_t::new mx_time_int_local_t(double)
                                        4      3
       -> operator new(unsigned int)
                                        4      3
       -> mx_time_int_local_t::mx_time_int_local_t(double)
                                        4      3
     mx_time_int_local_t::new mx_time_int_local_t(irs_i16)
                                        2      3
       -> operator new(unsigned int)
                                        2      3
       -> mx_time_int_local_t::mx_time_int_local_t(irs_i16)
                                        2      3
     mx_time_int_local_t::operator()()
                                        8      6
       -> set_to_cnt(irs_i16 &, irs_i16)
                                        8      3
       -> counter_get()                 8      3
       -> counter_get()                 8      3
       -> test_to_cnt(irs_i16)          8      3
       -> set_to_cnt(irs_i16 &, irs_i16)
                                        8      3
     mx_time_int_local_t::set_show_int(double)
                                        8      6
     mx_time_int_local_t::set_show_int(irs_i16)
                                        0      3
     mx_time_int_local_t::~mx_time_int_local_t()
                                        0      3
     mx_time_int_t::delete ~mx_time_int_t(mx_time_int_t *)
                                        2      3
       -> mx_time_int_t::~mx_time_int_t()
                                        2      3
       -> operator delete(void *)       2      3
     mx_time_int_t::init()              2      3
       -> init_to_cnt()                 2      3
     mx_time_int_t::mx_time_int_t()     2      3
       -> mx_time_int_t::init()         2      3
     mx_time_int_t::mx_time_int_t(double)
                                        6      3
       -> mx_time_int_t::init()         6      3
       -> mx_time_int_t::set_show_int(double)
                                        6      3
     mx_time_int_t::mx_time_int_t(irs_i16)
                                        4      3
       -> mx_time_int_t::init()         4      3
       -> mx_time_int_t::set_show_int(irs_i16)
                                        4      3
     mx_time_int_t::new mx_time_int_t()
                                        0      3
       -> operator new(unsigned int)
                                        0      3
       -> mx_time_int_t::mx_time_int_t()
                                        0      3
     mx_time_int_t::new mx_time_int_t(double)
                                        4      3
       -> operator new(unsigned int)
                                        4      3
       -> mx_time_int_t::mx_time_int_t(double)
                                        4      3
     mx_time_int_t::new mx_time_int_t(irs_i16)
                                        2      3
       -> operator new(unsigned int)
                                        2      3
       -> mx_time_int_t::mx_time_int_t(irs_i16)
                                        2      3
     mx_time_int_t::operator()()       10      6
       -> counter_get()                10      3
       -> set_to_cnt(irs_i16 &, irs_i16)
                                       10      3
       -> test_to_cnt(irs_i16)         10      3
       -> set_to_cnt(irs_i16 &, irs_i16)
                                       10      3
       -> counter_get()                10      3
     mx_time_int_t::set_show_int(double)
                                        8      6
     mx_time_int_t::set_show_int(irs_i16)
                                        0      3
     mx_time_int_t::~mx_time_int_t()
                                        2      3
       -> deinit_to_cnt()               2      3
     next_to_cnt(irs_i16 &, irs_i16)
                                        0      3
     set_to_cnt(irs_i16 &, irs_i16)     4      3
       -> counter_get()                 4      3
     test_to_cnt(irs_i16)               4      3
       -> counter_get()                 4      3


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     set_to_cnt(irs_i16 &, irs_i16)   26
     next_to_cnt(irs_i16 &, irs_i16)
                                      16
     test_to_cnt(irs_i16)             32
     init_to_cnt()                     6
     deinit_to_cnt()                   6
     mx_time_int_t::init()            92
     mx_time_int_t::mx_time_int_t()   18
     mx_time_int_t::mx_time_int_t(irs_i16)
                                      26
     mx_time_int_t::mx_time_int_t(double)
                                      30
     mx_time_int_t::~mx_time_int_t()
                                      12
     mx_time_int_t::set_show_int(irs_i16)
                                       8
     mx_time_int_t::set_show_int(double)
                                      54
     mx_time_int_t::operator()()     234
     mx_time_int_local_t::init()     112
     mx_time_int_local_t::mx_time_int_local_t()
                                      20
     mx_time_int_local_t::mx_time_int_local_t(irs_i16)
                                      26
     mx_time_int_local_t::mx_time_int_local_t(double)
                                      30
     mx_time_int_local_t::~mx_time_int_local_t()
                                       2
     mx_time_int_local_t::set_show_int(irs_i16)
                                       8
     mx_time_int_local_t::set_show_int(double)
                                      54
     mx_time_int_local_t::operator()()
                                     272
     mx_time_int_t::new mx_time_int_t()
                                      26
     mx_time_int_t::new mx_time_int_t(irs_i16)
                                      38
     mx_time_int_t::new mx_time_int_t(double)
                                      42
     mx_time_int_t::delete ~mx_time_int_t(mx_time_int_t *)
                                      28
     mx_time_int_local_t::new mx_time_int_local_t()
                                      26
     mx_time_int_local_t::new mx_time_int_local_t(irs_i16)
                                      38
     mx_time_int_local_t::new mx_time_int_local_t(double)
                                      42
     mx_time_int_local_t::delete ~mx_time_int_local_t(mx_time_int_local_t *)
                                      28

 
 1 352 bytes in segment FARCODE
 
 1 352 bytes of CODE memory

Errors: none
Warnings: none
